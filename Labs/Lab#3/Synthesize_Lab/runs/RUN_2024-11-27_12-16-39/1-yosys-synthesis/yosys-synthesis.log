
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/1-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: ./simple_adder.v
Parsing SystemVerilog input from `./simple_adder.v' to AST representation.
Storing AST representation for module `$abstract\generic_simple_adder'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./pipelined_multiplier.v
Parsing SystemVerilog input from `./pipelined_multiplier.v' to AST representation.
Storing AST representation for module `$abstract\generic_piplined_multiplier'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\generic_simple_adder'.
Generating RTLIL representation for module `\generic_simple_adder'.

5.1. Analyzing design hierarchy..
Top module:  \generic_simple_adder

5.2. Analyzing design hierarchy..
Top module:  \generic_simple_adder
Removing unused module `$abstract\generic_piplined_multiplier'.
Removing unused module `$abstract\generic_simple_adder'.
Removed 2 unused modules.
Renaming module generic_simple_adder to generic_simple_adder.

6. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/1-yosys-synthesis/hierarchy.dot'.
Dumping module generic_simple_adder to page 1.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \generic_simple_adder

8.2. Analyzing design hierarchy..
Top module:  \generic_simple_adder
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

15. Executing PROC_MUX pass (convert decision trees to multiplexers).

16. Executing PROC_DLATCH pass (convert process syncs to latches).

17. Executing PROC_DFF pass (convert process syncs to FFs).

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

20. Executing CHECK pass (checking for obvious problems).
Checking module generic_simple_adder...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

22. Executing FLATTEN pass (flatten design).

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_simple_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_simple_adder.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

25.9. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_simple_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_simple_adder.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

27.9. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module generic_simple_adder:
  creating $macc model for $add$./simple_adder.v:7$1 ($add).
  creating $alu model for $macc $add$./simple_adder.v:7$1.
  creating $alu cell for $add$./simple_adder.v:7$1: $auto$alumacc.cc:485:replace_alu$2
  created 1 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_simple_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_simple_adder.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

33.9. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_simple_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_simple_adder.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

38.6. Executing OPT_SHARE pass.

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

38.10. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using template $paramod$4ccbe221165818e15f326ddee3d1183c7924e12f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~245 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.
<suppressed ~19 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..
Removed 8 unused cells and 26 unused wires.
<suppressed ~9 debug messages>

40.5. Finished fast OPT passes.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

41.5. Finished fast OPT passes.

42. Executing ABC pass (technology mapping using ABC).

42.1. Extracting gate netlist of module `\generic_simple_adder' to `<abc-temp-dir>/input.blif'..
Extracted 49 gates and 65 wires to a netlist network with 16 inputs and 9 outputs.

42.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

42.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        7
ABC RESULTS:                OR cells:        3
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:               NOR cells:        5
ABC RESULTS:            ANDNOT cells:       15
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:       40
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

43.3. Executing OPT_DFF pass (perform DFF optimizations).

43.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..
Removed 0 unused cells and 47 unused wires.
<suppressed ~1 debug messages>

43.5. Finished fast OPT passes.

44. Executing HIERARCHY pass (managing design hierarchy).

44.1. Analyzing design hierarchy..
Top module:  \generic_simple_adder

44.2. Analyzing design hierarchy..
Top module:  \generic_simple_adder
Removed 0 unused modules.

45. Executing CHECK pass (checking for obvious problems).
Checking module generic_simple_adder...
Found and reported 0 problems.

46. Printing statistics.

=== generic_simple_adder ===

   Number of wires:                 44
   Number of wire bits:             65
   Number of public wires:           4
   Number of public wire bits:      25
   Number of ports:                  4
   Number of port bits:             25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 49
     $_ANDNOT_                      15
     $_AND_                          2
     $_NAND_                         7
     $_NOR_                          5
     $_ORNOT_                        2
     $_OR_                           3
     $_XNOR_                         5
     $_XOR_                         10

47. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/1-yosys-synthesis/primitive_techmap.dot'.
Dumping module generic_simple_adder to page 1.

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_simple_adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_simple_adder.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_simple_adder'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_simple_adder.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/tmp/4e3ea45d08bc42e58a104fbc5331e484.lib ",
   "modules": {
      "\\generic_simple_adder": {
         "num_wires":         44,
         "num_wire_bits":     65,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 25,
         "num_ports":         4,
         "num_port_bits":     25,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         49,
         "num_cells_by_type": {
            "$_ANDNOT_": 15,
            "$_AND_": 2,
            "$_NAND_": 7,
            "$_NOR_": 5,
            "$_ORNOT_": 2,
            "$_OR_": 3,
            "$_XNOR_": 5,
            "$_XOR_": 10
         }
      }
   },
      "design": {
         "num_wires":         44,
         "num_wire_bits":     65,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 25,
         "num_ports":         4,
         "num_port_bits":     25,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         49,
         "num_cells_by_type": {
            "$_ANDNOT_": 15,
            "$_AND_": 2,
            "$_NAND_": 7,
            "$_NOR_": 5,
            "$_ORNOT_": 2,
            "$_OR_": 3,
            "$_XNOR_": 5,
            "$_XOR_": 10
         }
      }
}

50. Printing statistics.

=== generic_simple_adder ===

   Number of wires:                 44
   Number of wire bits:             65
   Number of public wires:           4
   Number of public wire bits:      25
   Number of ports:                  4
   Number of port bits:             25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 49
     $_ANDNOT_                      15
     $_AND_                          2
     $_NAND_                         7
     $_NOR_                          5
     $_ORNOT_                        2
     $_OR_                           3
     $_XNOR_                         5
     $_XOR_                         10

   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

[INFO] Applying tri-state buffer mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\generic_simple_adder':
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/tmp/4e3ea45d08bc42e58a104fbc5331e484.lib ",
   "modules": {
      "\\generic_simple_adder": {
         "num_wires":         44,
         "num_wire_bits":     65,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 25,
         "num_ports":         4,
         "num_port_bits":     25,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         49,
         "num_cells_by_type": {
            "$_ANDNOT_": 15,
            "$_AND_": 2,
            "$_NAND_": 7,
            "$_NOR_": 5,
            "$_ORNOT_": 2,
            "$_OR_": 3,
            "$_XNOR_": 5,
            "$_XOR_": 10
         }
      }
   },
      "design": {
         "num_wires":         44,
         "num_wire_bits":     65,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 25,
         "num_ports":         4,
         "num_port_bits":     25,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         49,
         "num_cells_by_type": {
            "$_ANDNOT_": 15,
            "$_AND_": 2,
            "$_NAND_": 7,
            "$_NOR_": 5,
            "$_ORNOT_": 2,
            "$_OR_": 3,
            "$_XNOR_": 5,
            "$_XOR_": 10
         }
      }
}

56. Printing statistics.

=== generic_simple_adder ===

   Number of wires:                 44
   Number of wire bits:             65
   Number of public wires:           4
   Number of public wire bits:      25
   Number of ports:                  4
   Number of port bits:             25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 49
     $_ANDNOT_                      15
     $_AND_                          2
     $_NAND_                         7
     $_NOR_                          5
     $_ORNOT_                        2
     $_OR_                           3
     $_XNOR_                         5
     $_XOR_                         10

   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

[INFO] Using generated ABC script '/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/1-yosys-synthesis/AREA_0.abc'â€¦

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\generic_simple_adder' to `/tmp/yosys-abc-ZQmg3v/input.blif'..
Extracted 49 gates and 65 wires to a netlist network with 16 inputs and 9 outputs.

57.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-ZQmg3v/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-ZQmg3v/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-ZQmg3v/input.blif 
ABC: + read_lib -w /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/tmp/4e3ea45d08bc42e58a104fbc5331e484.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/tmp/4e3ea45d08bc42e58a104fbc5331e484.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/1-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/1-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =     40 (  0.0 %)   Cap = 11.8 ff (  0.0 %)   Area =      356.59 (100.0 %)   Delay =  1691.44 ps  ( 17.5 %)               
ABC: Path  0 --      14 : 0    2 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   6.3 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      38 : 2    2 sky130_fd_sc_hd__and2_2   A =   7.51  Df = 174.4  -46.6 ps  S =  52.8 ps  Cin =  1.5 ff  Cout =   6.0 ff  Cmax = 303.0 ff  G =  393  
ABC: Path  2 --      42 : 3    3 sky130_fd_sc_hd__o21bai_2 A =  11.26  Df = 386.1 -117.2 ps  S = 196.8 ps  Cin =  3.4 ff  Cout =  13.4 ff  Cmax = 140.1 ff  G =  380  
ABC: Path  3 --      44 : 5    3 sky130_fd_sc_hd__a221o_2  A =  11.26  Df = 776.9 -210.5 ps  S =  71.5 ps  Cin =  2.3 ff  Cout =   9.7 ff  Cmax = 299.4 ff  G =  395  
ABC: Path  4 --      49 : 4    2 sky130_fd_sc_hd__a31o_2   A =   8.76  Df =1038.6 -302.9 ps  S =  60.4 ps  Cin =  2.4 ff  Cout =   7.0 ff  Cmax = 271.9 ff  G =  285  
ABC: Path  5 --      51 : 5    2 sky130_fd_sc_hd__a32o_2   A =  11.26  Df =1321.8 -384.4 ps  S =  87.9 ps  Cin =  2.3 ff  Cout =  10.9 ff  Cmax = 264.6 ff  G =  454  
ABC: Path  6 --      63 : 2    1 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1691.4 -519.0 ps  S = 453.7 ps  Cin =  8.5 ff  Cout =  33.4 ff  Cmax = 121.8 ff  G =  394  
ABC: Start-point = pi13 (\B [1]).  End-point = po7 (\Sum [7]).
ABC: netlist                       : i/o =   16/    9  lat =    0  nd =    40  edge =     97  area =356.71  delay = 6.00  lev = 6
ABC: + write_blif /tmp/yosys-abc-ZQmg3v/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        5
ABC RESULTS:        internal signals:       40
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_simple_adder..
Removed 0 unused cells and 65 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).

63. Executing CHECK pass (checking for obvious problems).
Checking module generic_simple_adder...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-16-39/tmp/4e3ea45d08bc42e58a104fbc5331e484.lib ",
   "modules": {
      "\\generic_simple_adder": {
         "num_wires":         35,
         "num_wire_bits":     56,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 25,
         "num_ports":         4,
         "num_port_bits":     25,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         40,
         "area":              356.592000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__a32o_2": 1,
            "sky130_fd_sc_hd__and2_2": 5,
            "sky130_fd_sc_hd__nand2_2": 10,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 4,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__or2_2": 5,
            "sky130_fd_sc_hd__xnor2_2": 4,
            "sky130_fd_sc_hd__xor2_2": 2
         }
      }
   },
      "design": {
         "num_wires":         35,
         "num_wire_bits":     56,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 25,
         "num_ports":         4,
         "num_port_bits":     25,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         40,
         "area":              356.592000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__a32o_2": 1,
            "sky130_fd_sc_hd__and2_2": 5,
            "sky130_fd_sc_hd__nand2_2": 10,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 4,
            "sky130_fd_sc_hd__o21bai_2": 1,
            "sky130_fd_sc_hd__or2_2": 5,
            "sky130_fd_sc_hd__xnor2_2": 4,
            "sky130_fd_sc_hd__xor2_2": 2
         }
      }
}

64. Printing statistics.

=== generic_simple_adder ===

   Number of wires:                 35
   Number of wire bits:             56
   Number of public wires:           4
   Number of public wire bits:      25
   Number of ports:                  4
   Number of port bits:             25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__and2_2         5
     sky130_fd_sc_hd__nand2_2       10
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2         4
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__or2_2          5
     sky130_fd_sc_hd__xnor2_2        4
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\generic_simple_adder': 356.592000
     of which used for sequential elements: 0.000000 (0.00%)

65. Executing Verilog backend.
Dumping module `\generic_simple_adder'.

66. Executing JSON backend.
