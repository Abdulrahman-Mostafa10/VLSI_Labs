
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/01-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: ./counter_dut.v
Parsing SystemVerilog input from `./counter_dut.v' to AST representation.
Storing AST representation for module `$abstract\counter_dut'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\counter_dut'.
Generating RTLIL representation for module `\counter_dut'.

4.1. Analyzing design hierarchy..
Top module:  \counter_dut

4.2. Analyzing design hierarchy..
Top module:  \counter_dut
Removing unused module `$abstract\counter_dut'.
Removed 1 unused modules.
Renaming module counter_dut to counter_dut.

5. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/01-yosys-synthesis/hierarchy.dot'.
Dumping module counter_dut to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \counter_dut

7.2. Analyzing design hierarchy..
Top module:  \counter_dut
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$./counter_dut.v:9$1 in module counter_dut.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\counter_dut.$proc$./counter_dut.v:9$1'.
     1/1: $0\counter[3:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\counter_dut.\counter' using process `\counter_dut.$proc$./counter_dut.v:9$1'.
  created $dff cell `$procdff$24' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\counter_dut.$proc$./counter_dut.v:9$1'.
Removing empty process `counter_dut.$proc$./counter_dut.v:9$1'.
Cleaned up 6 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module counter_dut...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.
<suppressed ~1 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_dut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_dut.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_dut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_dut.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$24 ($dff) from module counter_dut (D = $0\counter[3:0], Q = \counter).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.
<suppressed ~1 debug messages>

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_dut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_dut.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell counter_dut.$add$./counter_dut.v:20$3 ($add).
Removed top 28 bits (of 32) from port Y of cell counter_dut.$add$./counter_dut.v:20$3 ($add).
Removed top 31 bits (of 32) from port B of cell counter_dut.$sub$./counter_dut.v:26$5 ($sub).
Removed top 28 bits (of 32) from port Y of cell counter_dut.$sub$./counter_dut.v:26$5 ($sub).
Removed top 28 bits (of 32) from wire counter_dut.$add$./counter_dut.v:20$3_Y.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module counter_dut:
  creating $macc model for $add$./counter_dut.v:20$3 ($add).
  creating $macc model for $sub$./counter_dut.v:26$5 ($sub).
  creating $alu model for $macc $sub$./counter_dut.v:26$5.
  creating $alu model for $macc $add$./counter_dut.v:20$3.
  creating $alu cell for $add$./counter_dut.v:20$3: $auto$alumacc.cc:485:replace_alu$29
  creating $alu cell for $sub$./counter_dut.v:26$5: $auto$alumacc.cc:485:replace_alu$32
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_dut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_dut.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.
<suppressed ~1 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_dut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_dut.
    Consolidated identical input bits for $mux cell $procmux$20:
      Old ports: A=4'1111, B=4'0000, Y=$procmux$20_Y
      New ports: A=1'1, B=1'0, Y=$procmux$20_Y [0]
      New connections: $procmux$20_Y [3:1] = { $procmux$20_Y [0] $procmux$20_Y [0] $procmux$20_Y [0] }
  Optimizing cells in module \counter_dut.
Performed a total of 1 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.
<suppressed ~1 debug messages>

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_dut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_dut.
Performed a total of 0 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

37.18. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~269 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.
<suppressed ~45 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..
Removed 7 unused cells and 75 unused wires.
<suppressed ~8 debug messages>

39.5. Finished fast OPT passes.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\counter_dut' to `<abc-temp-dir>/input.blif'..
Extracted 40 gates and 49 wires to a netlist network with 7 inputs and 5 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:               XOR cells:        5
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:               MUX cells:        8
ABC RESULTS:        internal signals:       37
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        5
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.
<suppressed ~4 debug messages>

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..
Removed 0 unused cells and 28 unused wires.
<suppressed ~1 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \counter_dut

43.2. Analyzing design hierarchy..
Top module:  \counter_dut
Removed 0 unused modules.

44. Executing CHECK pass (checking for obvious problems).
Checking module counter_dut...
Found and reported 0 problems.

45. Printing statistics.

=== counter_dut ===

   Number of wires:                 34
   Number of wire bits:             40
   Number of public wires:           5
   Number of public wire bits:       8
   Number of ports:                  5
   Number of port bits:              8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       5
     $_DFFE_PP_                      4
     $_MUX_                          8
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          2
     $_ORNOT_                        1
     $_OR_                           7
     $_XNOR_                         1
     $_XOR_                          5

46. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/01-yosys-synthesis/primitive_techmap.dot'.
Dumping module counter_dut to page 1.

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \counter_dut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \counter_dut.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\counter_dut'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_dut.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/tmp/73ea36383cdc4f548c02e3e0b478808f.lib ",
   "modules": {
      "\\counter_dut": {
         "num_wires":         34,
         "num_wire_bits":     40,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 8,
         "num_ports":         5,
         "num_port_bits":     8,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         36,
         "num_cells_by_type": {
            "$_ANDNOT_": 5,
            "$_DFFE_PP_": 4,
            "$_MUX_": 8,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 2,
            "$_ORNOT_": 1,
            "$_OR_": 7,
            "$_XNOR_": 1,
            "$_XOR_": 5
         }
      }
   },
      "design": {
         "num_wires":         34,
         "num_wire_bits":     40,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 8,
         "num_ports":         5,
         "num_port_bits":     8,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         36,
         "num_cells_by_type": {
            "$_ANDNOT_": 5,
            "$_DFFE_PP_": 4,
            "$_MUX_": 8,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 2,
            "$_ORNOT_": 1,
            "$_OR_": 7,
            "$_XNOR_": 1,
            "$_XOR_": 5
         }
      }
}

49. Printing statistics.

=== counter_dut ===

   Number of wires:                 34
   Number of wire bits:             40
   Number of public wires:           5
   Number of public wire bits:       8
   Number of ports:                  5
   Number of port bits:              8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       5
     $_DFFE_PP_                      4
     $_MUX_                          8
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          2
     $_ORNOT_                        1
     $_OR_                           7
     $_XNOR_                         1
     $_XOR_                          5

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!
   Area for cell type $_DFFE_PP_ is unknown!

[INFO] Applying tri-state buffer mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\counter_dut':
  mapped 4 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/tmp/73ea36383cdc4f548c02e3e0b478808f.lib ",
   "modules": {
      "\\counter_dut": {
         "num_wires":         38,
         "num_wire_bits":     44,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 8,
         "num_ports":         5,
         "num_port_bits":     8,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         40,
         "area":              85.081600,
         "num_cells_by_type": {
            "$_ANDNOT_": 5,
            "$_MUX_": 12,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 2,
            "$_ORNOT_": 1,
            "$_OR_": 7,
            "$_XNOR_": 1,
            "$_XOR_": 5,
            "sky130_fd_sc_hd__dfxtp_2": 4
         }
      }
   },
      "design": {
         "num_wires":         38,
         "num_wire_bits":     44,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 8,
         "num_ports":         5,
         "num_port_bits":     8,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         40,
         "area":              85.081600,
         "num_cells_by_type": {
            "$_ANDNOT_": 5,
            "$_MUX_": 12,
            "$_NAND_": 2,
            "$_NOR_": 1,
            "$_NOT_": 2,
            "$_ORNOT_": 1,
            "$_OR_": 7,
            "$_XNOR_": 1,
            "$_XOR_": 5,
            "sky130_fd_sc_hd__dfxtp_2": 4
         }
      }
}

55. Printing statistics.

=== counter_dut ===

   Number of wires:                 38
   Number of wire bits:             44
   Number of public wires:           5
   Number of public wire bits:       8
   Number of ports:                  5
   Number of port bits:              8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     $_ANDNOT_                       5
     $_MUX_                         12
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          2
     $_ORNOT_                        1
     $_OR_                           7
     $_XNOR_                         1
     $_XOR_                          5
     sky130_fd_sc_hd__dfxtp_2        4

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_MUX_ is unknown!

   Chip area for module '\counter_dut': 85.081600
     of which used for sequential elements: 85.081600 (100.00%)

[INFO] Using generated ABC script '/home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/01-yosys-synthesis/AREA_0.abc'â€¦

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\counter_dut' to `/tmp/yosys-abc-f4f5h5/input.blif'..
Extracted 36 gates and 43 wires to a netlist network with 7 inputs and 4 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-f4f5h5/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-f4f5h5/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-f4f5h5/input.blif 
ABC: + read_lib -w /home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/tmp/73ea36383cdc4f548c02e3e0b478808f.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/tmp/73ea36383cdc4f548c02e3e0b478808f.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/01-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/01-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =     23 (  4.3 %)   Cap = 12.7 ff (  2.7 %)   Area =      202.69 ( 91.3 %)   Delay =   793.50 ps  ( 26.1 %)               
ABC: Path  0 --       4 : 0    6 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  30.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      18 : 2    2 sky130_fd_sc_hd__xor2_2  A =  16.27  Df = 154.9  -10.6 ps  S = 128.5 ps  Cin =  8.6 ff  Cout =   6.1 ff  Cmax = 130.0 ff  G =   67  
ABC: Path  2 --      19 : 2    2 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 467.1 -157.5 ps  S =  84.7 ps  Cin =  1.5 ff  Cout =  13.6 ff  Cmax = 299.4 ff  G =  903  
ABC: Path  3 --      21 : 2    1 sky130_fd_sc_hd__nand2_2 A =   6.26  Df = 528.4 -176.7 ps  S =  35.2 ps  Cin =  4.4 ff  Cout =   2.5 ff  Cmax = 295.7 ff  G =   53  
ABC: Path  4 --      23 : 4    1 sky130_fd_sc_hd__a31o_2  A =   8.76  Df = 793.5 -128.5 ps  S = 198.9 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 271.9 ff  G = 1420  
ABC: Start-point = pi3 (\counter [0]).  End-point = po1 ($auto$rtlil.cc:2739:MuxGate$296).
ABC: netlist                       : i/o =    7/    4  lat =    0  nd =    23  edge =     62  area =202.74  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-f4f5h5/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        3
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        4
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_dut..
Removed 0 unused cells and 43 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module counter_dut...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/vlsi/runs/RUN_2024-12-04_10-33-24/tmp/73ea36383cdc4f548c02e3e0b478808f.lib ",
   "modules": {
      "\\counter_dut": {
         "num_wires":         28,
         "num_wire_bits":     31,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 8,
         "num_ports":         5,
         "num_port_bits":     8,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         27,
         "area":              287.776000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 2,
            "sky130_fd_sc_hd__a31o_2": 3,
            "sky130_fd_sc_hd__dfxtp_2": 4,
            "sky130_fd_sc_hd__inv_2": 1,
            "sky130_fd_sc_hd__nand2_2": 4,
            "sky130_fd_sc_hd__nand2b_2": 1,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__o21ai_2": 2,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1,
            "sky130_fd_sc_hd__xor2_2": 1
         }
      }
   },
      "design": {
         "num_wires":         28,
         "num_wire_bits":     31,
         "num_pub_wires":     5,
         "num_pub_wire_bits": 8,
         "num_ports":         5,
         "num_port_bits":     8,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         27,
         "area":              287.776000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 2,
            "sky130_fd_sc_hd__a31o_2": 3,
            "sky130_fd_sc_hd__dfxtp_2": 4,
            "sky130_fd_sc_hd__inv_2": 1,
            "sky130_fd_sc_hd__nand2_2": 4,
            "sky130_fd_sc_hd__nand2b_2": 1,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nor2_2": 2,
            "sky130_fd_sc_hd__o21ai_2": 2,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 1,
            "sky130_fd_sc_hd__xor2_2": 1
         }
      }
}

63. Printing statistics.

=== counter_dut ===

   Number of wires:                 28
   Number of wire bits:             31
   Number of public wires:           5
   Number of public wire bits:       8
   Number of ports:                  5
   Number of port bits:              8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__a31o_2         3
     sky130_fd_sc_hd__dfxtp_2        4
     sky130_fd_sc_hd__inv_2          1
     sky130_fd_sc_hd__nand2_2        4
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2         2
     sky130_fd_sc_hd__o21ai_2        2
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         1

   Chip area for module '\counter_dut': 287.776000
     of which used for sequential elements: 85.081600 (29.57%)

64. Executing Verilog backend.
Dumping module `\counter_dut'.

65. Executing JSON backend.
