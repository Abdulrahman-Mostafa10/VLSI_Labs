
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/01-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: ./simple_mul.v
Parsing SystemVerilog input from `./simple_mul.v' to AST representation.
Storing AST representation for module `$abstract\simple_mult'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\simple_mult'.
Generating RTLIL representation for module `\simple_mult'.

4.1. Analyzing design hierarchy..
Top module:  \simple_mult

4.2. Analyzing design hierarchy..
Top module:  \simple_mult
Removing unused module `$abstract\simple_mult'.
Removed 1 unused modules.
Renaming module simple_mult to simple_mult.

5. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/01-yosys-synthesis/hierarchy.dot'.
Dumping module simple_mult to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \simple_mult

7.2. Analyzing design hierarchy..
Top module:  \simple_mult
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

14. Executing PROC_MUX pass (convert decision trees to multiplexers).

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module simple_mult...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_mult.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_mult.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

26.9. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module simple_mult:
  creating $macc model for $mul$./simple_mul.v:7$1 ($mul).
  creating $macc cell for $mul$./simple_mul.v:7$1: $auto$alumacc.cc:365:replace_macc$2
  created 0 $alu and 1 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_mult.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_mult.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add \A * \B (4x4 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001000 for cells of type $fa.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~270 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.
<suppressed ~109 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..
Removed 5 unused cells and 59 unused wires.
<suppressed ~6 debug messages>

39.5. Finished fast OPT passes.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\simple_mult' to `<abc-temp-dir>/input.blif'..
Extracted 67 gates and 75 wires to a netlist network with 8 inputs and 8 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        7
ABC RESULTS:               NOT cells:        2
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               XOR cells:       13
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:            ANDNOT cells:       18
ABC RESULTS:               NOR cells:        2
ABC RESULTS:                OR cells:        7
ABC RESULTS:               AND cells:       10
ABC RESULTS:        internal signals:       59
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        8
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..
Removed 0 unused cells and 39 unused wires.
<suppressed ~1 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \simple_mult

43.2. Analyzing design hierarchy..
Top module:  \simple_mult
Removed 0 unused modules.

44. Executing CHECK pass (checking for obvious problems).
Checking module simple_mult...
Found and reported 0 problems.

45. Printing statistics.

=== simple_mult ===

   Number of wires:                 64
   Number of wire bits:             77
   Number of public wires:           3
   Number of public wire bits:      16
   Number of ports:                  3
   Number of port bits:             16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 69
     $_ANDNOT_                      18
     $_AND_                         10
     $_NAND_                         7
     $_NOR_                          2
     $_NOT_                          2
     $_ORNOT_                        3
     $_OR_                           7
     $_XNOR_                         7
     $_XOR_                         13

46. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/01-yosys-synthesis/primitive_techmap.dot'.
Dumping module simple_mult to page 1.

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_mult.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_mult'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_mult.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/tmp/ccf1708293d741a2b13d5e8ba5df9096.lib ",
   "modules": {
      "\\simple_mult": {
         "num_wires":         64,
         "num_wire_bits":     77,
         "num_pub_wires":     3,
         "num_pub_wire_bits": 16,
         "num_ports":         3,
         "num_port_bits":     16,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         69,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_AND_": 10,
            "$_NAND_": 7,
            "$_NOR_": 2,
            "$_NOT_": 2,
            "$_ORNOT_": 3,
            "$_OR_": 7,
            "$_XNOR_": 7,
            "$_XOR_": 13
         }
      }
   },
      "design": {
         "num_wires":         64,
         "num_wire_bits":     77,
         "num_pub_wires":     3,
         "num_pub_wire_bits": 16,
         "num_ports":         3,
         "num_port_bits":     16,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         69,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_AND_": 10,
            "$_NAND_": 7,
            "$_NOR_": 2,
            "$_NOT_": 2,
            "$_ORNOT_": 3,
            "$_OR_": 7,
            "$_XNOR_": 7,
            "$_XOR_": 13
         }
      }
}

49. Printing statistics.

=== simple_mult ===

   Number of wires:                 64
   Number of wire bits:             77
   Number of public wires:           3
   Number of public wire bits:      16
   Number of ports:                  3
   Number of port bits:             16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 69
     $_ANDNOT_                      18
     $_AND_                         10
     $_NAND_                         7
     $_NOR_                          2
     $_NOT_                          2
     $_ORNOT_                        3
     $_OR_                           7
     $_XNOR_                         7
     $_XOR_                         13

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

[INFO] Applying tri-state buffer mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\simple_mult':
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/tmp/ccf1708293d741a2b13d5e8ba5df9096.lib ",
   "modules": {
      "\\simple_mult": {
         "num_wires":         64,
         "num_wire_bits":     77,
         "num_pub_wires":     3,
         "num_pub_wire_bits": 16,
         "num_ports":         3,
         "num_port_bits":     16,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         69,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_AND_": 10,
            "$_NAND_": 7,
            "$_NOR_": 2,
            "$_NOT_": 2,
            "$_ORNOT_": 3,
            "$_OR_": 7,
            "$_XNOR_": 7,
            "$_XOR_": 13
         }
      }
   },
      "design": {
         "num_wires":         64,
         "num_wire_bits":     77,
         "num_pub_wires":     3,
         "num_pub_wire_bits": 16,
         "num_ports":         3,
         "num_port_bits":     16,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         69,
         "num_cells_by_type": {
            "$_ANDNOT_": 18,
            "$_AND_": 10,
            "$_NAND_": 7,
            "$_NOR_": 2,
            "$_NOT_": 2,
            "$_ORNOT_": 3,
            "$_OR_": 7,
            "$_XNOR_": 7,
            "$_XOR_": 13
         }
      }
}

55. Printing statistics.

=== simple_mult ===

   Number of wires:                 64
   Number of wire bits:             77
   Number of public wires:           3
   Number of public wire bits:      16
   Number of ports:                  3
   Number of port bits:             16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 69
     $_ANDNOT_                      18
     $_AND_                         10
     $_NAND_                         7
     $_NOR_                          2
     $_NOT_                          2
     $_ORNOT_                        3
     $_OR_                           7
     $_XNOR_                         7
     $_XOR_                         13

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

[INFO] Using generated ABC script '/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/01-yosys-synthesis/AREA_0.abc'â€¦

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\simple_mult' to `/tmp/yosys-abc-qsvkXB/input.blif'..
Extracted 69 gates and 77 wires to a netlist network with 8 inputs and 8 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-qsvkXB/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-qsvkXB/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-qsvkXB/input.blif 
ABC: + read_lib -w /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/tmp/ccf1708293d741a2b13d5e8ba5df9096.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/tmp/ccf1708293d741a2b13d5e8ba5df9096.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/01-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/01-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =     55 (  0.0 %)   Cap = 13.0 ff (  1.8 %)   Area =      526.76 ( 96.4 %)   Delay =  2240.94 ps  ( 16.4 %)               
ABC: Path  0 --       7 : 0    8 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  26.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      33 : 4    3 sky130_fd_sc_hd__and4_2  A =  10.01  Df = 226.2   -3.2 ps  S =  78.1 ps  Cin =  1.5 ff  Cout =   8.1 ff  Cmax = 300.3 ff  G =  508  
ABC: Path  2 --      36 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df = 708.5 -331.1 ps  S =  88.4 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 310.4 ff  G =  386  
ABC: Path  3 --      44 : 3    3 sky130_fd_sc_hd__and3_2  A =   7.51  Df = 911.2 -325.3 ps  S =  68.0 ps  Cin =  1.5 ff  Cout =   8.1 ff  Cmax = 309.5 ff  G =  520  
ABC: Path  4 --      47 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1396.6 -345.5 ps  S =  88.7 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 310.4 ff  G =  391  
ABC: Path  5 --      52 : 3    3 sky130_fd_sc_hd__and3_2  A =   7.51  Df =1642.1 -337.6 ps  S = 101.6 ps  Cin =  1.5 ff  Cout =  15.6 ff  Cmax = 309.5 ff  G = 1005  
ABC: Path  6 --      60 : 3    1 sky130_fd_sc_hd__a21bo_2 A =  10.01  Df =1875.0 -414.0 ps  S =  61.7 ps  Cin =  2.0 ff  Cout =   8.4 ff  Cmax = 288.4 ff  G =  406  
ABC: Path  7 --      61 : 2    1 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df =2240.9 -556.2 ps  S = 453.6 ps  Cin =  8.5 ff  Cout =  33.4 ff  Cmax = 121.8 ff  G =  394  
ABC: Start-point = pi6 (\A [3]).  End-point = po3 (\P [5]).
ABC: netlist                       : i/o =    8/    8  lat =    0  nd =    55  edge =    153  area =526.87  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-qsvkXB/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        2
ABC RESULTS:        internal signals:       61
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        8
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_mult..
Removed 0 unused cells and 77 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module simple_mult...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_13-30-12/tmp/ccf1708293d741a2b13d5e8ba5df9096.lib ",
   "modules": {
      "\\simple_mult": {
         "num_wires":         50,
         "num_wire_bits":     63,
         "num_pub_wires":     3,
         "num_pub_wire_bits": 16,
         "num_ports":         3,
         "num_port_bits":     16,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         55,
         "area":              526.755200,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21oi_2": 4,
            "sky130_fd_sc_hd__a22o_2": 2,
            "sky130_fd_sc_hd__a22oi_2": 2,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 2,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__nand2_2": 7,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nor2_2": 4,
            "sky130_fd_sc_hd__o211a_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 4,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o21bai_2": 3,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or3_2": 2,
            "sky130_fd_sc_hd__xnor2_2": 4,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
   },
      "design": {
         "num_wires":         50,
         "num_wire_bits":     63,
         "num_pub_wires":     3,
         "num_pub_wire_bits": 16,
         "num_ports":         3,
         "num_port_bits":     16,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         55,
         "area":              526.755200,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21oi_2": 4,
            "sky130_fd_sc_hd__a22o_2": 2,
            "sky130_fd_sc_hd__a22oi_2": 2,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 2,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__and4_2": 3,
            "sky130_fd_sc_hd__nand2_2": 7,
            "sky130_fd_sc_hd__nand2b_2": 2,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nor2_2": 4,
            "sky130_fd_sc_hd__o211a_2": 1,
            "sky130_fd_sc_hd__o21ai_2": 4,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o21bai_2": 3,
            "sky130_fd_sc_hd__or2_2": 1,
            "sky130_fd_sc_hd__or3_2": 2,
            "sky130_fd_sc_hd__xnor2_2": 4,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
}

63. Printing statistics.

=== simple_mult ===

   Number of wires:                 50
   Number of wire bits:             63
   Number of public wires:           3
   Number of public wire bits:      16
   Number of ports:                  3
   Number of port bits:             16
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21oi_2        4
     sky130_fd_sc_hd__a22o_2         2
     sky130_fd_sc_hd__a22oi_2        2
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2         2
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         4
     sky130_fd_sc_hd__and4_2         3
     sky130_fd_sc_hd__nand2_2        7
     sky130_fd_sc_hd__nand2b_2       2
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2         4
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o21ai_2        4
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o21bai_2       3
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or3_2          2
     sky130_fd_sc_hd__xnor2_2        4
     sky130_fd_sc_hd__xor2_2         3

   Chip area for module '\simple_mult': 526.755200
     of which used for sequential elements: 0.000000 (0.00%)

64. Executing Verilog backend.
Dumping module `\simple_mult'.

65. Executing JSON backend.
