
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)
Loaded SDC plugin

1. Executing Liberty frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.
[INFO] Using SDC file '/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/1-yosys-synthesis/synthesis.abc.sdc' for ABCâ€¦

2. Executing Verilog-2005 frontend: ./pipelined_multiplier.v
Parsing SystemVerilog input from `./pipelined_multiplier.v' to AST representation.
Storing AST representation for module `$abstract\generic_piplined_multiplier'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\generic_piplined_multiplier'.
Generating RTLIL representation for module `\generic_piplined_multiplier'.

4.1. Analyzing design hierarchy..
Top module:  \generic_piplined_multiplier

4.2. Analyzing design hierarchy..
Top module:  \generic_piplined_multiplier
Removing unused module `$abstract\generic_piplined_multiplier'.
Removed 1 unused modules.
Renaming module generic_piplined_multiplier to generic_piplined_multiplier.

5. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/1-yosys-synthesis/hierarchy.dot'.
Dumping module generic_piplined_multiplier to page 1.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \generic_piplined_multiplier

7.2. Analyzing design hierarchy..
Top module:  \generic_piplined_multiplier
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./pipelined_multiplier.v:13$1 in module generic_piplined_multiplier.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 10 redundant assignments.
Promoted 0 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
     1/10: $0\Result[15:0]
     2/10: $0\Product_reg2[15:0]
     3/10: $0\B_reg2[7:0]
     4/10: $0\A_reg2[7:0]
     5/10: $0\Product_reg1[15:0]
     6/10: $0\B_reg1[7:0]
     7/10: $0\A_reg1[7:0]
     8/10: $0\Product_reg0[15:0]
     9/10: $0\B_reg0[7:0]
    10/10: $0\A_reg0[7:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\generic_piplined_multiplier.\Result' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$5' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\A_reg0' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$8' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\A_reg1' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$11' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\A_reg2' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$14' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\B_reg0' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$17' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\B_reg1' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$20' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\B_reg2' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$23' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\Product_reg0' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$26' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\Product_reg1' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$29' with positive edge clock and positive level reset.
Creating register for signal `\generic_piplined_multiplier.\Product_reg2' using process `\generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
  created $adff cell `$procdff$32' with positive edge clock and positive level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `generic_piplined_multiplier.$proc$./pipelined_multiplier.v:13$1'.
Cleaned up 0 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module generic_piplined_multiplier...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.
<suppressed ~10 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..
Removed 6 unused cells and 26 unused wires.
<suppressed ~13 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_piplined_multiplier..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_piplined_multiplier.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_piplined_multiplier..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_piplined_multiplier.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

26.9. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module generic_piplined_multiplier:
  creating $macc model for $mul$./pipelined_multiplier.v:31$2 ($mul).
  creating $macc cell for $mul$./pipelined_multiplier.v:31$2: $auto$alumacc.cc:365:replace_macc$33
  created 0 $alu and 1 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_piplined_multiplier..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_piplined_multiplier.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_piplined_multiplier..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_piplined_multiplier.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/c26m31cifv9fyym8p72j6cj5ilqgnh2z-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adff.
Using extmapper maccmap for cells of type $macc.
  add \A * \B (8x8 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~347 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.
<suppressed ~383 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..
Removed 24 unused cells and 110 unused wires.
<suppressed ~25 debug messages>

39.5. Finished fast OPT passes.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\generic_piplined_multiplier' to `<abc-temp-dir>/input.blif'..
Extracted 347 gates and 363 wires to a netlist network with 16 inputs and 16 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               AND cells:       55
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:       25
ABC RESULTS:              NAND cells:       25
ABC RESULTS:                OR cells:       37
ABC RESULTS:               NOR cells:       12
ABC RESULTS:            ANDNOT cells:       97
ABC RESULTS:               XOR cells:       86
ABC RESULTS:        internal signals:      331
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..
Removed 0 unused cells and 91 unused wires.
<suppressed ~1 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \generic_piplined_multiplier

43.2. Analyzing design hierarchy..
Top module:  \generic_piplined_multiplier
Removed 0 unused modules.

44. Executing CHECK pass (checking for obvious problems).
Checking module generic_piplined_multiplier...
Found and reported 0 problems.

45. Printing statistics.

=== generic_piplined_multiplier ===

   Number of wires:                353
   Number of wire bits:            532
   Number of public wires:           8
   Number of public wire bits:      82
   Number of ports:                  5
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                418
     $_ANDNOT_                      97
     $_AND_                         55
     $_DFF_PP0_                     64
     $_NAND_                        25
     $_NOR_                         12
     $_NOT_                          7
     $_ORNOT_                       10
     $_OR_                          37
     $_XNOR_                        25
     $_XOR_                         86

46. Generating Graphviz representation of design.
Writing dot description to `/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/1-yosys-synthesis/primitive_techmap.dot'.
Dumping module generic_piplined_multiplier to page 1.

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \generic_piplined_multiplier..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \generic_piplined_multiplier.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\generic_piplined_multiplier'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module generic_piplined_multiplier.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/tmp/fef1690ac8b74082a0f255d5d9b5cc2a.lib ",
   "modules": {
      "\\generic_piplined_multiplier": {
         "num_wires":         353,
         "num_wire_bits":     532,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 82,
         "num_ports":         5,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         418,
         "num_cells_by_type": {
            "$_ANDNOT_": 97,
            "$_AND_": 55,
            "$_DFF_PP0_": 64,
            "$_NAND_": 25,
            "$_NOR_": 12,
            "$_NOT_": 7,
            "$_ORNOT_": 10,
            "$_OR_": 37,
            "$_XNOR_": 25,
            "$_XOR_": 86
         }
      }
   },
      "design": {
         "num_wires":         353,
         "num_wire_bits":     532,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 82,
         "num_ports":         5,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         418,
         "num_cells_by_type": {
            "$_ANDNOT_": 97,
            "$_AND_": 55,
            "$_DFF_PP0_": 64,
            "$_NAND_": 25,
            "$_NOR_": 12,
            "$_NOT_": 7,
            "$_ORNOT_": 10,
            "$_OR_": 37,
            "$_XNOR_": 25,
            "$_XOR_": 86
         }
      }
}

49. Printing statistics.

=== generic_piplined_multiplier ===

   Number of wires:                353
   Number of wire bits:            532
   Number of public wires:           8
   Number of public wire bits:      82
   Number of ports:                  5
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                418
     $_ANDNOT_                      97
     $_AND_                         55
     $_DFF_PP0_                     64
     $_NAND_                        25
     $_NOR_                         12
     $_NOT_                          7
     $_ORNOT_                       10
     $_OR_                          37
     $_XNOR_                        25
     $_XOR_                         86

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!
   Area for cell type $_DFF_PP0_ is unknown!

[INFO] Applying tri-state buffer mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v'â€¦

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).
[INFO] Applying latch mapping from '/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â€¦

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/amostafa/.volare/volare/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\generic_piplined_multiplier':
  mapped 64 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/tmp/fef1690ac8b74082a0f255d5d9b5cc2a.lib ",
   "modules": {
      "\\generic_piplined_multiplier": {
         "num_wires":         417,
         "num_wire_bits":     596,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 82,
         "num_ports":         5,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         482,
         "area":              1681.612800,
         "num_cells_by_type": {
            "$_ANDNOT_": 97,
            "$_AND_": 55,
            "$_NAND_": 25,
            "$_NOR_": 12,
            "$_NOT_": 71,
            "$_ORNOT_": 10,
            "$_OR_": 37,
            "$_XNOR_": 25,
            "$_XOR_": 86,
            "sky130_fd_sc_hd__dfrtp_2": 64
         }
      }
   },
      "design": {
         "num_wires":         417,
         "num_wire_bits":     596,
         "num_pub_wires":     8,
         "num_pub_wire_bits": 82,
         "num_ports":         5,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         482,
         "area":              1681.612800,
         "num_cells_by_type": {
            "$_ANDNOT_": 97,
            "$_AND_": 55,
            "$_NAND_": 25,
            "$_NOR_": 12,
            "$_NOT_": 71,
            "$_ORNOT_": 10,
            "$_OR_": 37,
            "$_XNOR_": 25,
            "$_XOR_": 86,
            "sky130_fd_sc_hd__dfrtp_2": 64
         }
      }
}

55. Printing statistics.

=== generic_piplined_multiplier ===

   Number of wires:                417
   Number of wire bits:            596
   Number of public wires:           8
   Number of public wire bits:      82
   Number of ports:                  5
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                482
     $_ANDNOT_                      97
     $_AND_                         55
     $_NAND_                        25
     $_NOR_                         12
     $_NOT_                         71
     $_ORNOT_                       10
     $_OR_                          37
     $_XNOR_                        25
     $_XOR_                         86
     sky130_fd_sc_hd__dfrtp_2       64

   Area for cell type $_NOT_ is unknown!
   Area for cell type $_AND_ is unknown!
   Area for cell type $_NAND_ is unknown!
   Area for cell type $_OR_ is unknown!
   Area for cell type $_NOR_ is unknown!
   Area for cell type $_XOR_ is unknown!
   Area for cell type $_XNOR_ is unknown!
   Area for cell type $_ANDNOT_ is unknown!
   Area for cell type $_ORNOT_ is unknown!

   Chip area for module '\generic_piplined_multiplier': 1681.612800
     of which used for sequential elements: 1681.612800 (100.00%)

[INFO] Using generated ABC script '/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/1-yosys-synthesis/AREA_0.abc'â€¦

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\generic_piplined_multiplier' to `/tmp/yosys-abc-bhV83G/input.blif'..
Extracted 418 gates and 435 wires to a netlist network with 17 inputs and 80 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/6l3aj1gi4lja8z5s4lan2k2cfz9mqkrz-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-bhV83G/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-bhV83G/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-bhV83G/input.blif 
ABC: + read_lib -w /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/tmp/fef1690ac8b74082a0f255d5d9b5cc2a.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/tmp/fef1690ac8b74082a0f255d5d9b5cc2a.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/1-yosys-synthesis/synthesis.abc.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + source /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/1-yosys-synthesis/AREA_0.abc 
ABC: Error: The network is combinational.
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    369 ( 18.7 %)   Cap = 15.3 ff (  3.5 %)   Area =     3185.56 ( 78.9 %)   Delay =  3976.88 ps  ( 11.7 %)               
ABC: Path  0 --      12 : 0   14 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  42.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     176 : 4    3 sky130_fd_sc_hd__and4_2   A =  10.01  Df = 226.5   -3.2 ps  S =  78.4 ps  Cin =  1.5 ff  Cout =   8.2 ff  Cmax = 300.3 ff  G =  513  
ABC: Path  2 --     178 : 3    2 sky130_fd_sc_hd__or3_2    A =   7.51  Df = 689.1 -308.7 ps  S =  91.4 ps  Cin =  1.5 ff  Cout =   6.9 ff  Cmax = 310.4 ff  G =  441  
ABC: Path  3 --     182 : 3    3 sky130_fd_sc_hd__a21o_2   A =   8.76  Df = 909.3 -368.7 ps  S =  61.7 ps  Cin =  2.4 ff  Cout =   9.6 ff  Cmax = 309.5 ff  G =  390  
ABC: Path  4 --     222 : 3    2 sky130_fd_sc_hd__a21bo_2  A =  10.01  Df =1130.6 -355.2 ps  S =  55.9 ps  Cin =  2.0 ff  Cout =   7.3 ff  Cmax = 288.4 ff  G =  338  
ABC: Path  5 --     224 : 3    3 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =1338.0 -428.4 ps  S =  70.9 ps  Cin =  2.4 ff  Cout =  11.7 ff  Cmax = 309.5 ff  G =  474  
ABC: Path  6 --     261 : 3    2 sky130_fd_sc_hd__a21boi_2 A =  11.26  Df =1520.2 -486.0 ps  S = 156.2 ps  Cin =  3.6 ff  Cout =  10.1 ff  Cmax = 129.1 ff  G =  272  
ABC: Path  7 --     263 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1710.0 -164.6 ps  S = 194.0 ps  Cin =  8.5 ff  Cout =  10.9 ff  Cmax = 121.8 ff  G =  123  
ABC: Path  8 --     271 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =1925.4 -227.2 ps  S =  34.4 ps  Cin =  2.4 ff  Cout =   3.1 ff  Cmax = 309.5 ff  G =  125  
ABC: Path  9 --     295 : 2    4 sky130_fd_sc_hd__or2_2    A =   6.26  Df =2241.9 -339.6 ps  S =  77.0 ps  Cin =  1.5 ff  Cout =  10.9 ff  Cmax = 299.4 ff  G =  716  
ABC: Path 10 --     374 : 5    1 sky130_fd_sc_hd__a221o_2  A =  11.26  Df =2623.1 -229.7 ps  S =  50.2 ps  Cin =  2.3 ff  Cout =   2.5 ff  Cmax = 299.4 ff  G =  100  
ABC: Path 11 --     375 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =2883.7 -250.0 ps  S =  48.1 ps  Cin =  2.4 ff  Cout =   3.2 ff  Cmax = 325.0 ff  G =  131  
ABC: Path 12 --     377 : 4    4 sky130_fd_sc_hd__and4b_2  A =  11.26  Df =3133.1 -237.7 ps  S = 107.2 ps  Cin =  1.6 ff  Cout =  14.0 ff  Cmax = 297.6 ff  G =  853  
ABC: Path 13 --     391 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =3785.8 -755.8 ps  S = 107.0 ps  Cin =  1.5 ff  Cout =   4.6 ff  Cmax = 310.4 ff  G =  294  
ABC: Path 14 --     392 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =3976.9 -544.7 ps  S = 185.8 ps  Cin =  4.4 ff  Cout =  33.4 ff  Cmax = 295.7 ff  G =  755  
ABC: Start-point = pi11 (\A [5]).  End-point = po12 ($auto$maccmap.cc:240:synth$193.Y [13]).
ABC: netlist                       : i/o =   17/   80  lat =    0  nd =   369  edge =    887  area =3185.95  delay =14.00  lev = 14
ABC: + write_blif /tmp/yosys-abc-bhV83G/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       69
ABC RESULTS:        internal signals:      338
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       80
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \generic_piplined_multiplier..
Removed 19 unused cells and 550 unused wires.
<suppressed ~20 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module generic_piplined_multiplier...
Found and reported 0 problems.
{
   "creator": "Yosys 0.46 (git sha1 e97731b9dda91fa5fa53ed87df7c34163ba59a41, clang++ 17.0.6 -fPIC -O3)",
   "invocation": "stat -json -liberty /home/amostafa/CMP/VLSI/runs/RUN_2024-11-27_12-23-01/tmp/fef1690ac8b74082a0f255d5d9b5cc2a.lib ",
   "modules": {
      "\\generic_piplined_multiplier": {
         "num_wires":         422,
         "num_wire_bits":     451,
         "num_pub_wires":     53,
         "num_pub_wire_bits": 82,
         "num_ports":         5,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         433,
         "area":              4867.168000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 2,
            "sky130_fd_sc_hd__a211oi_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 6,
            "sky130_fd_sc_hd__a21boi_2": 2,
            "sky130_fd_sc_hd__a21o_2": 20,
            "sky130_fd_sc_hd__a21oi_2": 12,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 10,
            "sky130_fd_sc_hd__a22oi_2": 7,
            "sky130_fd_sc_hd__a31o_2": 9,
            "sky130_fd_sc_hd__a31oi_2": 1,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 21,
            "sky130_fd_sc_hd__and2b_2": 7,
            "sky130_fd_sc_hd__and3_2": 16,
            "sky130_fd_sc_hd__and4_2": 12,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__dfrtp_2": 64,
            "sky130_fd_sc_hd__inv_2": 69,
            "sky130_fd_sc_hd__mux2_1": 1,
            "sky130_fd_sc_hd__nand2_2": 27,
            "sky130_fd_sc_hd__nand2b_2": 8,
            "sky130_fd_sc_hd__nand3_2": 14,
            "sky130_fd_sc_hd__nand3b_2": 1,
            "sky130_fd_sc_hd__nand4_2": 3,
            "sky130_fd_sc_hd__nor2_2": 26,
            "sky130_fd_sc_hd__nor3_2": 4,
            "sky130_fd_sc_hd__nor3b_2": 2,
            "sky130_fd_sc_hd__o211a_2": 3,
            "sky130_fd_sc_hd__o211ai_2": 1,
            "sky130_fd_sc_hd__o21a_2": 5,
            "sky130_fd_sc_hd__o21ai_2": 5,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o21bai_2": 6,
            "sky130_fd_sc_hd__o22ai_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o32a_2": 1,
            "sky130_fd_sc_hd__or2_2": 10,
            "sky130_fd_sc_hd__or3_2": 3,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 30,
            "sky130_fd_sc_hd__xor2_2": 15
         }
      }
   },
      "design": {
         "num_wires":         422,
         "num_wire_bits":     451,
         "num_pub_wires":     53,
         "num_pub_wire_bits": 82,
         "num_ports":         5,
         "num_port_bits":     34,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         433,
         "area":              4867.168000,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 2,
            "sky130_fd_sc_hd__a211oi_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 6,
            "sky130_fd_sc_hd__a21boi_2": 2,
            "sky130_fd_sc_hd__a21o_2": 20,
            "sky130_fd_sc_hd__a21oi_2": 12,
            "sky130_fd_sc_hd__a221o_2": 1,
            "sky130_fd_sc_hd__a22o_2": 10,
            "sky130_fd_sc_hd__a22oi_2": 7,
            "sky130_fd_sc_hd__a31o_2": 9,
            "sky130_fd_sc_hd__a31oi_2": 1,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 21,
            "sky130_fd_sc_hd__and2b_2": 7,
            "sky130_fd_sc_hd__and3_2": 16,
            "sky130_fd_sc_hd__and4_2": 12,
            "sky130_fd_sc_hd__and4b_2": 1,
            "sky130_fd_sc_hd__dfrtp_2": 64,
            "sky130_fd_sc_hd__inv_2": 69,
            "sky130_fd_sc_hd__mux2_1": 1,
            "sky130_fd_sc_hd__nand2_2": 27,
            "sky130_fd_sc_hd__nand2b_2": 8,
            "sky130_fd_sc_hd__nand3_2": 14,
            "sky130_fd_sc_hd__nand3b_2": 1,
            "sky130_fd_sc_hd__nand4_2": 3,
            "sky130_fd_sc_hd__nor2_2": 26,
            "sky130_fd_sc_hd__nor3_2": 4,
            "sky130_fd_sc_hd__nor3b_2": 2,
            "sky130_fd_sc_hd__o211a_2": 3,
            "sky130_fd_sc_hd__o211ai_2": 1,
            "sky130_fd_sc_hd__o21a_2": 5,
            "sky130_fd_sc_hd__o21ai_2": 5,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o21bai_2": 6,
            "sky130_fd_sc_hd__o22ai_2": 1,
            "sky130_fd_sc_hd__o2bb2a_2": 1,
            "sky130_fd_sc_hd__o311a_2": 1,
            "sky130_fd_sc_hd__o32a_2": 1,
            "sky130_fd_sc_hd__or2_2": 10,
            "sky130_fd_sc_hd__or3_2": 3,
            "sky130_fd_sc_hd__or4_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 30,
            "sky130_fd_sc_hd__xor2_2": 15
         }
      }
}

63. Printing statistics.

=== generic_piplined_multiplier ===

   Number of wires:                422
   Number of wire bits:            451
   Number of public wires:          53
   Number of public wire bits:      82
   Number of ports:                  5
   Number of port bits:             34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                433
     sky130_fd_sc_hd__a211o_2        2
     sky130_fd_sc_hd__a211oi_2       2
     sky130_fd_sc_hd__a21bo_2        6
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2        20
     sky130_fd_sc_hd__a21oi_2       12
     sky130_fd_sc_hd__a221o_2        1
     sky130_fd_sc_hd__a22o_2        10
     sky130_fd_sc_hd__a22oi_2        7
     sky130_fd_sc_hd__a31o_2         9
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2        21
     sky130_fd_sc_hd__and2b_2        7
     sky130_fd_sc_hd__and3_2        16
     sky130_fd_sc_hd__and4_2        12
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__dfrtp_2       64
     sky130_fd_sc_hd__inv_2         69
     sky130_fd_sc_hd__mux2_1         1
     sky130_fd_sc_hd__nand2_2       27
     sky130_fd_sc_hd__nand2b_2       8
     sky130_fd_sc_hd__nand3_2       14
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nand4_2        3
     sky130_fd_sc_hd__nor2_2        26
     sky130_fd_sc_hd__nor3_2         4
     sky130_fd_sc_hd__nor3b_2        2
     sky130_fd_sc_hd__o211a_2        3
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21ai_2        5
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o21bai_2       6
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__or2_2         10
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or4_2          1
     sky130_fd_sc_hd__xnor2_2       30
     sky130_fd_sc_hd__xor2_2        15

   Chip area for module '\generic_piplined_multiplier': 4867.168000
     of which used for sequential elements: 1681.612800 (34.55%)

64. Executing Verilog backend.
Dumping module `\generic_piplined_multiplier'.

65. Executing JSON backend.
